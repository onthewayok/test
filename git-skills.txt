git rm -cached <file>	从staging区删除
git reset HEAD <file>	从staging区删除，相当于取消之前的git add，回到上一次提交状态
git checkout -- <file>	放弃（取消）工作区的修改（删除）等操作，工作区恢复修改（删除）之前的状态

git rm <file>	从git管理中删除一个文件（该文件处于不同区域时（工作区，staging区，仓库），情况不一样，
				最终需要从 仓库->staging区->工作区 的顺序依次删除掉，中途可以通过上面3条命令取消这次操作）
				
git rm -f <file>	把文件从staging区和工作区都删除
如果直接从系统通过r -rf <file> 删除文件，需要通过上述命令同步git的状态


git reset 的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，会丢掉后面的版本
此时如果用“git push”会报错，因为我们本地库HEAD指向的版本比远程库的要旧，所以我们要用“git push -f”强制推上去

git reset (–-mixed) HEAD~1 
回退一个版本,且会将暂存区的内容和本地已提交的内容全部恢复到未暂存的状态,不影响原来本地文件(未提交的也 
不受影响) 
git reset –-soft HEAD~1 
回退一个版本,不清空暂存区,将已提交的内容恢复到暂存区,不影响原来本地的文件(未提交的也不受影响) 
git reset –-hard HEAD~1 
回退一个版本,清空暂存区,将已提交的内容的版本恢复到本地,本地的文件也将被恢复的版本替换

git reset –-mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息
git reset –-soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可
git reset –-hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容

git reset --hard HEAD	任何情况下，真正回到上一次提交状态

git revert 的作用通过反做创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样，
			但是HEAD指针是指向这个新生成的版本，而不是目标版本。如下图所示，假设我们要回退到版本一，
			版本四的内容和版本一是一样的
使用“git revert -n 版本号 注意： 这里可能会出现冲突，那么需要手动修改冲突的文件。而且要git add 文件名， 使用“git commit -m 版本名


git commit --amend -m "test comment"	更新上一次的提交（注释内容等），可用于本地合并多个commit为一个最终这个而一个commit


git stash	将当前分支未提交的内容（没做完）放入一个区域，用于不影响切换到其他分支工作
git stash list	查看stash缓存列表
git stash apply	将当前分支的stash内容恢复到工作状态，相当于git stash apply 0	所有stash
git stash apply 1	将当前分支的stash{1}的内容恢复到工作状态


git revert <hashcode>	取消某次提交

git reflog	记录本地仓库的每次操作日志

git show <hashcode>	查看指定的操作日志

git cat-file -p <hashcode> 查看对象tree信息等相关内容

git checkout <file>	还原被删除（修改）的文件

############ 分支相关操作 begin ############
git push <远程主机名> <本地分支名>:<远程分支名>

git push -u origin master 将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了

git push origin :master # 等同于 git push origin --delete master 表示删除origin主机的master分支

查看分支：git branch

查看远程分支：git branch -a

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
git branch -d temp 删除本地分支

删除远程分支: git push origin --delete [branchname]
git branch -d branch_name

删除远程分支
git branch -r -d origin/branch-name  
git push origin :branch-name 

# 本地分支和远程分支关联
如果远程新建了一个分支，本地没有该分支。
可以利用 git checkout --track origin/branch_name ，这时本地会新建一个分支名叫 branch_name ，会自动跟踪远程的同名分支 branch_name。
git checkout --track origin/branch_name

如果本地新建了一个分支 branch_name，但是在远程没有。
这时候 push 和 pull 指令就无法确定该跟踪谁，一般来说我们都会使其跟踪远程同名分支，所以可以利用 git push --set-upstream origin branch_name ，这样就可以自动在远程创建一个 branch_name 分支，然后本地分支会 track 该分支。后面再对该分支使用 push 和 pull 就自动同步。
git push --set-upstream origin branch_name

# git 查看本地分支和远程分支的关联（跟踪）关系
git branch -vv

# git 拉取远程分支并创建本地分支
git checkout -b <本地分支名> <远程主机>/<远程分支名>，例如：git checkout -b xxx origin/xxx

1. git merge --squash devel 合并devel上的多个commit为一个commit到当前分支上，并且当前分支需要commit一次，也就是改变了 commit 的 author为当前分支的

2.先切换到 devel 分支（不一样咯）：git checkout devel
变基：git rebase -i master
切换回目标分支：git checkout master
合并: git merge devel
这里完成了第二步之后我想你应该大概知道发生了什么事了，我们在 devel 里面对照 master 进行了变基，
所谓的变基其实就是找到两个分支共同的祖先，然后在当前分支上合并从共同祖先到现在的所有 commit，
所以我们在第二步的时候会选择怎么处理这些 commit，然后我们就得到了一个从公共commit 到现在的单个 commit，
这个时候别人讲我们这个 commit 合并到 master 也只会在 master 上留下一个 commit 记录

############ 分支相关操作 end ############

git log --graph --pretty=format:"%Cblue%ci - %Cred%h - %C(yellow)%ae%Creset(%an) %Cgreen%s (%Cred%ar)"

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

git log --graph --pretty=format:'%C(yellow)%h%Creset -%C(cyan)%d%Creset %s %Cgreen(%an, %cr)' --abbrev-commit


git log --graph --pretty=format:'%Cblue%ci%Creset - %Cred%h%Creset%C(cyan)%d%Creset - %C(yellow)%an<%ae>%Creset %Cgreen%s%Creset %Cred(%ar)'

---下面这句是综合后的log格式化，最好-------------
git log --graph --pretty=format:'%Cblue%cd%Creset - %Cred%h%Creset%C(cyan)%d%Creset - %C(yellow)%an<%ae>%Creset %Cgreen%s%Creset %Cred(%ar)' --date=format:'%Y-%m-%d %H:%M:%S'

加入别名
git config --global alias.lg "log --graph --pretty=format:'%Cblue%cd%Creset - %Cred%h%Creset%C(cyan)%d%Creset - %C(yellow)%an<%ae>%Creset %Cgreen%s%Creset %Cred(%ar)' --date=format:'%Y-%m-%d %H:%M:%S'"

使用 git lg 就能使用
------------------------------------------------

Git diff 常见用法
 　Git diff

　　 　　用于比较两次修改的差异

　　　　1.1 比较工作区与暂存区

　　　　　　git diff 不加参数即默认比较工作区与暂存区

　　　　1.2 比较暂存区与最新本地版本库（本地库中最近一次commit的内容）

　　　　　　git diff --cached  [<path>...] 

　　　　1.3 比较工作区与最新本地版本库

　　　　　　git diff HEAD [<path>...]  如果HEAD指向的是master分支，那么HEAD还可以换成master

　　　　1.4 比较工作区与指定commit-id的差异

　　　　　　git diff commit-id  [<path>...] 

　　　　1.5 比较暂存区与指定commit-id的差异

　　　　　　git diff --cached [<commit-id>] [<path>...] 

　　　　1.6 比较两个commit-id之间的差异

　　　　　　git diff [<commit-id>] [<commit-id>]

　　　　1.7 使用git diff打补丁

　　　　　　git diff > patch //patch的命名是随意的，不加其他参数时作用是当我们希望将我们本仓库工作区的修改拷贝一份到其他机器上使用，但是修改的文件比较多，拷贝量比较大，

　　　　　　此时我们可以将修改的代码做成补丁，之后在其他机器上对应目录下使用 git apply patch 将补丁打上即可

　　　　　　git diff --cached > patch //是将我们暂存区与版本库的差异做成补丁

　　　　　　  git diff --HEAD > patch //是将工作区与版本库的差异做成补丁

　　　　　　git diff Testfile > patch//将单个文件做成一个单独的补丁

　　　　拓展：git apply patch 应用补丁，应用补丁之前我们可以先检验一下补丁能否应用，git apply --check patch 如果没有任何输出，那么表示可以顺利接受这个补丁

　　　　　　　另外可以使用git apply --reject patch将能打的补丁先打上，有冲突的会生成.rej文件，此时可以找到这些文件进行手动打补丁

----------------------------------------------------------------------
git 远程仓库相关

* 搭建Git服务器(bare方式的裸库)
注意：centOS下 apt-get改为yum
第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录（此不也可以不要，通过密码的方式操作也可以(clone/push/pull)）：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

* git 远程仓库操作相关
git remote -v  查看远程连接(远程仓库)配置

git branch -a 查看所有分支，包括本地分支和远程分支

git remote rm origin  删除远程连接(远程仓库)配置

git remote add origin git@github.com:yourName/repositoryname.git 添加远程连接(远程仓库)配置




