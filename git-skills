git rm -cached <file>	从staging区删除
git reset HEAD <file>	从staging区删除，相当于取消之前的git add，回到上一次提交状态
git checkout -- <file>	放弃（取消）工作区的修改（删除）等操作，工作区恢复修改（删除）之前的状态

git rm <file>	从git管理中删除一个文件（该文件处于不同区域时（工作区，staging区，仓库），情况不一样，
				最终需要从 仓库->staging区->工作区 的顺序依次删除掉，中途可以通过上面3条命令取消这次操作）
				
git rm -f <file>	把文件从staging区和工作区都删除
如果直接从系统通过r -rf <file> 删除文件，需要通过上述命令同步git的状态


git reset --hard HEAD	任何情况下，真正回到上一次提交状态


git commit --amend -m "test comment"	更新上一次的提交（注释内容等）


git stash	将当前分支未提交的内容（没做完）放入一个区域，用于不影响切换到其他分支工作
git stash list	查看stash缓存列表
git stash apply	将当前分支的stash内容恢复到工作状态，相当于git stash apply 0	所有stash
git stash apply 1	将当前分支的stash{1}的内容恢复到工作状态


git revert <hashcode>	取消某次提交

git reflog	记录本地仓库的每次操作日志

git show <hashcode>	查看指定的操作日志

git checkout <file>	还原被删除（修改）的文件

git log --graph --pretty=format:"%Cblue%ci - %Cred%h - %C(yellow)%ae%Creset(%an) %Cgreen%s (%Cred%ar)"

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

git log --graph --pretty=format:'%C(yellow)%h%Creset -%C(cyan)%d%Creset %s %Cgreen(%an, %cr)' --abbrev-commit


git log --graph --pretty=format:'%Cblue%ci%Creset - %Cred%h%Creset%C(cyan)%d%Creset - %C(yellow)%an<%ae>%Creset %Cgreen%s%Creset %Cred(%ar)'

---下面这句是综合后的log格式化，最好
git log --graph --pretty=format:'%Cblue%cd%Creset - %Cred%h%Creset%C(cyan)%d%Creset - %C(yellow)%an<%ae>%Creset %Cgreen%s%Creset %Cred(%ar)' --date=format:'%Y-%m-%d %H:%M:%S'

加入别名
git config --global alias.lg "log --graph --pretty=format:'%Cblue%cd%Creset - %Cred%h%Creset%C(cyan)%d%Creset - %C(yellow)%an<%ae>%Creset %Cgreen%s%Creset %Cred(%ar)' --date=format:'%Y-%m-%d %H:%M:%S'"

使用 git lg 就能使用


Git diff 常见用法
 　Git diff

　　 　　用于比较两次修改的差异

　　　　1.1 比较工作区与暂存区

　　　　　　git diff 不加参数即默认比较工作区与暂存区

　　　　1.2 比较暂存区与最新本地版本库（本地库中最近一次commit的内容）

　　　　　　git diff --cached  [<path>...] 

　　　　1.3 比较工作区与最新本地版本库

　　　　　　git diff HEAD [<path>...]  如果HEAD指向的是master分支，那么HEAD还可以换成master

　　　　1.4 比较工作区与指定commit-id的差异

　　　　　　git diff commit-id  [<path>...] 

　　　　1.5 比较暂存区与指定commit-id的差异

　　　　　　git diff --cached [<commit-id>] [<path>...] 

　　　　1.6 比较两个commit-id之间的差异

　　　　　　git diff [<commit-id>] [<commit-id>]

　　　　1.7 使用git diff打补丁

　　　　　　git diff > patch //patch的命名是随意的，不加其他参数时作用是当我们希望将我们本仓库工作区的修改拷贝一份到其他机器上使用，但是修改的文件比较多，拷贝量比较大，

　　　　　　此时我们可以将修改的代码做成补丁，之后在其他机器上对应目录下使用 git apply patch 将补丁打上即可

　　　　　　git diff --cached > patch //是将我们暂存区与版本库的差异做成补丁

　　　　　　  git diff --HEAD > patch //是将工作区与版本库的差异做成补丁

　　　　　　git diff Testfile > patch//将单个文件做成一个单独的补丁

　　　　拓展：git apply patch 应用补丁，应用补丁之前我们可以先检验一下补丁能否应用，git apply --check patch 如果没有任何输出，那么表示可以顺利接受这个补丁

　　　　　　　另外可以使用git apply --reject patch将能打的补丁先打上，有冲突的会生成.rej文件，此时可以找到这些文件进行手动打补丁

